#+TITLE: Emacs Configuration
#+AUTHOR: Lourenço Henrique Moinheiro Martins Sborz Bogo

* General Stuff
** Setting Home and Emacs Directories
#+begin_src emacs-lisp
  (defvar user-home-directory (concat (getenv "HOME") "/"))
  (setq user-emacs-directory (concat user-home-directory ".emacs.d/"))
  (setq treesit-extra-load-path (cons (concat user-emacs-directory "tree-sitter/") '()))
#+end_src
** Utility functions
#+begin_src emacs-lisp
  (defun term-zsh ()
    (interactive) ;; This makes the function an interactively-callable command
    (term "/usr/bin/zsh"))

  (defun low/add-auto-mode (extension mode)
    "Add MODE to the `auto-mode-alist' for files with EXTENSION."
    (add-to-list 'auto-mode-alist (cons (concat "\\." extension "\\'") mode)))
#+end_src
** Removing bell
This removes the bell sound (also works on wsl)
#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src
* Setting up straight and use package
** Setting packages repositories
#+begin_src emacs-lisp
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org"   . "https://orgmode.org/elpa/")
                           ("elpa"  . "https://elpa.gnu.org/packages/")))
#+end_src
** Setting up Straight Package
#+begin_src emacs-lisp
    ;; (setq straight-repository-branch "develop")
     (defvar bootstrap-version)
     (let ((bootstrap-file
             (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
            (bootstrap-version 5))
       (unless (file-exists-p bootstrap-file)
         (with-current-buffer
           (url-retrieve-synchronously
             "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
             'silent 'inhibit-cookies)
           (goto-char (point-max))
           (eval-print-last-sexp)))
       (load bootstrap-file nil 'nomessage))
#+end_src

** Setting up Use Package
#+begin_src emacs-lisp
  (straight-use-package 'use-package)

  (setq use-package-always-ensure t) ;; check if packages that I use are installed
#+end_src
* Cleaning up .emacs.d
#+begin_src emacs-lisp
  ;; Changing the user-emacs-directory so unwanted files stay out
  (setq
    user-emacs-directory (expand-file-name "~/.cache/emacs")
    url-history-file     (expand-file-name "url/history" user-emacs-directory))
      
  ;; Package to automatically set common paths to user-emacs-directory
  (use-package no-littering
    :straight t)

  ;; setting custom-file
  (setq custom-file "~/.config/.custom.el")
  (if (file-exists-p custom-file) (load custom-file))

#+end_src
* Packages Setup
** Completion framework
*** Ivy
#+begin_src emacs-lisp
  (use-package ivy
    :straight t
    :diminish
    :bind (("C-s" . swiper)
            :map ivy-minibuffer-map
            ("TAB" . ivy-alt-done)  
            ("C-l" . ivy-alt-done)
            ("C-j" . ivy-next-line)
            ("C-k" . ivy-previous-line)
            :map ivy-switch-buffer-map
            ("C-k" . ivy-previous-line)
            ("C-l" . ivy-done)
            ("C-d" . ivy-switch-buffer-kill)
            :map ivy-reverse-i-search-map
            ("C-k" . ivy-previous-line)
            ("C-d" . ivy-reverse-i-search-kill))
    ;;:demand
    :init
    (ivy-mode 1))

  (use-package counsel
    :straight t
    :bind (
            ("M-x"     . counsel-M-x)
            ("C-x b"   . counsel-ibuffer)
            ("C-x C-f" . counsel-find-file)
            :map minibuffer-local-map
            ("C-r"     . 'counsel-minibuffer-history))
    :config
    (setq ivy-initial-inputs-alist nil))

  (use-package ivy-rich
    :straight t
    :init
    (ivy-rich-mode 1))
#+end_src
*** Vertico
#+begin_src emacs-lisp :tangle no
  (use-package vertico
    :straight t
    :init
    vertico-mode)

  (use-package savehist
    :straight t
    :init
    savehist-mode)

  (use-package emacs
    :init
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
              (replace-regexp-in-string
                "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                crm-separator)
              (car args))
        (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    (setq minibuffer-prompt-properties
      '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    (setq read-extended-command-predicate
      #'command-completion-default-include-p)

    (setq enable-recursive-minibuffers t))

  (use-package orderless
    :straight t
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))

  (use-package marginalia
    :straight t
    :init
    (marginalia-mode))

#+end_src
** UI
This section has a lot of submodules, and only one should be enabled. This means that every source block inside the submodules, but one should have :tangle no.

The block below is used in all modules.
#+begin_src emacs-lisp
  ;; need to run M-x all-the-icons-install-fonts
  (use-package all-the-icons :straight t)

  (use-package which-key
    :straight t
    :config
    (which-key-mode 1))

  (use-package org-modern
    :straight (org-modern :type git :host github :repo "minad/org-modern")
    :hook (org-mode . org-modern-mode))

  (use-package doom-themes
    :ensure t
    :straight t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
      doom-themes-enable-italic t)) ; if nil, italics is universally disabled

  (load-theme 'doom-monokai-spectrum t)
#+end_src
*** Nano emacs
This package is responsible for an entire ui style. The reason I'm using this fork, is because it works better than the original on the Emacs version I'm using. When the problems are solved, maybe I will switch to the other repo.
#+begin_src emacs-lisp
  (straight-use-package
    '(nano-emacs :type git :host github :repo "rougier/nano-emacs"
       :fork (:host github
               :repo "cnngimenez/nano-emacs")))

  ;; (require 'nano)

  (require 'nano-base-colors)
  (require 'nano-faces)
  (nano-faces)

  ;; The below command will only work if consel and smex are already loaded.
  ;; (require 'nano-counsel) 


  ;;(require 'nano-theme)
  ;;(nano-theme)

  ;; Nano header & mode lines
  (require 'nano-modeline)

  ;; Welcome message
  (let ((inhibit-message t))
    (message "Welcome to GNU Emacs / N Λ N O edition")
    (message (format "Initialization time: %s" (emacs-init-time))))

  ;; (require 'nano-splash)
#+end_src
*** Doom emacs
#+begin_src emacs-lisp :tangle no
  (use-package doom-modeline
    :straight t
    :ensure t
    :init (doom-modeline-mode 1))

  (use-package catppuccin-theme
    :config (setq catppuccin-height-title1 1.5))
#+end_src
** Dirvish (Dired but better)
#+begin_src emacs-lisp
  (use-package dirvish
    :straight t
    :ensure t
    :init
    ;; Let Dirvish take over Dired globally
    (dirvish-override-dired-mode))
#+end_src
** Flyspell
#+begin_src emacs-lisp
  (use-package flyspell-correct
    :straight t
    :after flyspell)

  (use-package flyspell-correct-ivy
    :straight t
    :after flyspell-correct)

  (setq ispell-program-name "hunspell")
  (setq ispell-dictionary "pt_BR")
  ;; (setq ispell-local-dictionary "pt_BR")
  (setq ispell-current-dictionary "pt_BR")
  (setq ispell-local-dictionary-alist '(
                                         ("pt_BR" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "pt_BR") nil utf-8)
                                         ("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)))
  (setq ispell-hunspell-dictionary-alist ispell-local-dictionary-alist)
#+end_src
** Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :straight t)
#+end_src
** QOL
#+begin_src emacs-lisp
  (use-package smex
    :straight t
    :config
    (smex-initialize))
#+end_src
** Code
*** Generic
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :straight t
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
** Completion (Company mode)
#+begin_src emacs-lisp
  (use-package company
    :straight t
    :hook
    (after-init . global-company-mode))
#+end_src
** Org and Note Taking
#+begin_src emacs-lisp
  (use-package org
    :straight (:type built-in)
    :init
    (defun low/org-mode-setup ()
      (org-indent-mode)
      (visual-line-mode 1))
    :hook
    (org-mode . low/org-mode-setup)
    :config
    (setq org-ellipsis " ▾"))

  (use-package org-roam
    :straight t
    :ensure t
    :requires (org)
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/Notes")
    (org-roam-completion-everywhere t)
    :config
    (org-roam-db-autosync-enable))

  (use-package visual-fill-column
    :init
    (defun low/visual-fill ()
      (setq visual-fill-column-width 200
        visual-fill-column-center-text t
        visual-fill-column-adjust-for-text-scale nil)
      (visual-fill-column-mode 1))
    :hook
    (org-mode   . low/visual-fill)
    (term-mode  . low/visual-fill)
    (vterm-mode . low/visual-fill))
#+end_src
** Project Management
#+begin_src emacs-lisp
  (use-package projectile
    :straight t
    :diminish projectile-mode
    :custom ((projectile-completion-system 'ivy))
    :init
    (projectile-mode 1))

  (use-package counsel-projectile
    :straight t
    :init
    (counsel-projectile-mode 1))
#+end_src
** Git
#+begin_src emacs-lisp
  (use-package magit
    :straight t
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src
** Keybindings
#+begin_src emacs-lisp
  (use-package evil
    :straight t
    :init
    (setq evil-want-keybinding nil)
    (add-hook 'term-mode-hook 'evil-emacs-state))
  (use-package evil-collection
    :straight t
    :after evil
    :ensure t
    :config
    (evil-mode 1)
    (evil-collection-init))

  (use-package hydra
    :straight t
    :config
    (defhydra hydra-text-scale ()
      "change text size"
      ("i" text-scale-increase "in")
      ("o" text-scale-decrease "out")
      ("q" nil "exit" :exit t)))

  (use-package general
    :straight t
    :config
    (general-create-definer low/leader
      :states '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")
    (general-create-definer low/local-leader
      :states '(normal insert visual emacs)
      :prefix "SPC m"
      :global-prefix "M-SPC")
    (general-create-definer low/next-key
      :states '(normal insert visual emacs)
      :prefix "]"
      :global-prefix "C-]")
    (general-create-definer low/prev-key
      :states '(normal insert visual emacs)
      :prefix "["
      :global-prefix "C-[")

    ;; Fixing visual line motion
    (general-def 'motion "j" 'evil-next-visual-line)
    (general-def 'motion "k" 'evil-previous-visual-line)

    (low/leader
      "f"  '(:ignore t :which-key "file")
      "ff" 'counsel-find-file
      "fr" 'counsel-recentf
      "h"  '(:ignore t :which-key "help")
      "hv" 'counsel-describe-variable
      "hf" 'counsel-describe-function
      "hk" 'describe-key
      "b"  '(:ignore t :which-key "buffer")
      "bd" 'kill-current-buffer
      "bs" 'save-buffer
      "bb" 'counsel-switch-buffer
      "w"  '(:ignore t :which-key "window")
      "wj" 'windmove-down
      "wk" 'windmove-up
      "wl" 'windmove-right
      "wh" 'windmove-left
      "w-" 'split-window-below
      "w/" 'split-window-right
      "wd" 'evil-window-delete
      "m"  '(:ignore t :which-key "local leader")
      "g"  '(:ignore t :which-key "magit")
      "gg" 'magit-status
      "t"  '(:ignore t :which-key "toggle")
      "ts" '(hydra-text-scale/body :which-key "scale text")
      "o"  '(:ignore t :which-key "open")
      "oa" 'org-agenda
      "ot" 'vterm
      "oc" 'org-capture
      "n"  '(:ignore t :which-key "notes")
      "nl" 'org-roam-buffer-toggle
      "nf" 'org-roam-node-find
      "ni" 'org-roam-node-insert)
    (low/leader
      :keymaps 'projectile-mode-map
      "p" '(projectile-command-map :which-key "projectile"))
    (low/leader
      "l" '(:ignore t :which-key "lsp")
      "lg" '(:ignore t :which-key "goto")
      "lgg" 'lsp-find-definition)
    (low/local-leader
      :keymaps 'org-mode-map
      :major-modes 'org-mode
      "o"  'org-open-at-point
      "e"  'org-edit-special
      "i"  '(:ignore t :which-key "insert")
      "is" 'org-insert-structure-template
      "s"  '(:ignore t :which-key "source")
      "sr" 'org-babel-remove-result
      "se" 'org-babel-execute-src-block)
    (low/local-leader
      :definer 'minor-mode
      :keymaps 'org-src-mode
      "e" 'org-edit-src-exit)
    (general-def
      :keymaps 'flyspell-mode-map
      "C-;" 'flyspell-correct-wrapper)
    (general-def
      :states 'normal
      :keymaps 'org-mode-map
      "<tab>" 'org-cycle)
    (general-def
      :states 'insert
      :keymaps 'org-mode-map
      "M-<return>" 'org-insert-item)
    (general-def
      :states 'normal
      :keymaps 'dirvish-mode-map
      "?" 'dirvish-dispatch
      "q" 'dirvish-quit)
    (general-def
      :keymaps 'org-agenda-mode-map
      :major-modes 'org-agenda
      "h"  'org-agenda-undo
      "j"  'evil-next-visual-line
      "k"  'evil-previous-visual-line
      "l"  'org-agenda-switch-to)
    (low/next-key
      "b" 'evil-next-buffer)
    (low/prev-key
      "b" 'evil-prev-buffer))
#+end_src

** LSP
 #+begin_src emacs-lisp
   (use-package lsp-mode
     :straight t
     :init
     ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
     ;; (setq lsp-keymap-prefix "C-c l")
     :commands lsp
     :hook (
             ((tsx-ts-mode typescript-ts-mode js-ts-mode js2-mode java-mode java-ts-mode) . lsp)
             (lsp-mode . lsp-enable-which-key-integration))
     :bind (:map lsp-mode-map
             ("M-." . completion-at-point)))

   (use-package lsp-ui
     :straight t
     :commands lsp-ui-mode)

   (use-package lsp-ivy
     :straight t
     :commands lsp-ivy-workspace-symbol)

   (use-package company-lsp
     :straight t
     :commands company-lsp)

   ;; optionally if you want to use debugger
   ;; (use-package dap-mode)
   ;; (use-package dap-LANGUAGE) to load the dap adapter for your language
 #+end_src
*** Java
#+begin_src emacs-lisp
  (use-package lsp-java
    :straight t)
#+end_src
** Elcord
#+begin_src emacs-lisp :tangle no
  (use-package elcord
    :straight t
    :config
    (elcord-mode 1))
#+end_src
** Terminal
#+begin_src emacs-lisp
  (use-package vterm
    :straight t
    :ensure t)
#+end_src
* UI
** Removing unnecessary things from UI
#+begin_src emacs-lisp
  ;; removing menu, tool and scroll bar
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (toggle-scroll-bar -1)

  ;; disabling splahes
  (setq inhibit-startup-message t) 
  (setq initial-scratch-message nil)
#+end_src
** Font
#+begin_src emacs-lisp
  ;;(set-frame-font "JetBrains Mono 13" nil t)
  (set-frame-font "JetBrains Mono 13")
#+end_src
** Line Numbers
#+begin_src emacs-lisp
    (global-display-line-numbers-mode)
    (column-number-mode)
    (setq display-line-numbers-type 'relative)

    ;; disabling it on some types of files
    (dolist (mode '(term-mode-hook
                     eshell-mode-hook
                     org-mode-hook
                     vterm-mode-hook))
      (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src
** Windows fix for fullscreen
There are different values for the variable windows-buffer-width.
- When using the doom ui, the best values I found were 2550x1080
- When using the nano ui, the best values I found were 2520x1060
  
#+begin_src emacs-lisp
  (defun emacs-windows-fullscreen-mode-2560x1080 ()
    "Make Emacs go fullscreen when using wsl2 inside windows.
  INTERACTIVE"
    (interactive)
    (set-frame-parameter (selected-frame) 'left 1366)
    (set-frame-parameter (selected-frame) 'top 0)
    (set-frame-parameter (selected-frame) 'undecorated t)
    (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
    (set-frame-size (selected-frame) 2520 1060 t))
#+end_src
* Org Agenda
#+begin_src emacs-lisp
  (setq org-agenda-files '("~/org/inbox.org"
                            "~/org/gtd.org"
                            "~/org/tickler.org"))

  (setq org-todo-keywords '((sequence "TODO(t)" "WAIT(w)" "REVIEW(r)" "|" "DONE(d)" "CANCELLED(c)")))

  (setq org-capture-templates '(("t" "Todo [inbox]" entry
                                  (file+headline "~/org/inbox.org" "Tasks")
                                  "* TODO %i%?")
                                 ("T" "Tickler" entry
                                   (file+headline "~/org/tickler.org" "Tickler")
                                   "* %i%? \n %t")))

  (setq org-refile-targets '(("~/org/gtd.org" :maxlevel . 3)
                              ("~/org/someday.org" :level . 1)
                              ("~/org/tickler.org" :maxlevel . 2)))

  (setq org-log-done 'time)
#+end_src
* Code
** General Configurations
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
  (save-place-mode 1)
  (setq use-dialog-box nil)
  (global-auto-revert-mode 1)
  (add-hook 'prog-mode-hook #'electric-pair-mode)

  (use-package hl-todo
    :straight t
    :hook (prog-mode . hl-todo-mode)
    :config
    (setq hl-todo-highlight-punctuation ":"
      hl-todo-keyword-faces
      `(("TODO"       warning bold)
         ("FIXME"      error bold)
         ("HACK"       font-lock-constant-face bold)
         ("REVIEW"     font-lock-keyword-face bold)
         ("NOTE"       success bold)
         ("DEPRECATED" font-lock-doc-face bold))))
  ;; (global-tree-sitter-mode)
  ;; (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
#+end_src
** Tree-sitter
Emacs 29 has native tree-sitter support so here I'm remapping the major modes to the tree-sitter versions of them.
#+begin_src emacs-lisp
  (setq major-mode-remap-alist
    '((yaml-mode . yaml-ts-mode)
       (bash-mode . bash-ts-mode)
       (js2-mode . js-ts-mode)
       (typescript-mode . typescript-ts-mode)
       (json-mode . json-ts-mode)
       (css-mode . css-ts-mode)
       (python-mode . python-ts-mode)
       (c-mode . c-ts-mode)
       (java-mode . java-ts-mode)))
#+end_src
** Emacs Lisp
#+begin_src emacs-lisp
  (setq lisp-indent-offset 2)
#+end_src

** Haskell
#+begin_src emacs-lisp
  (use-package haskell-mode
    :straight t)

  (low/local-leader
    :keymaps 'haskell-mode-map
    :major-modes 'haskell-mode
    "i" '(:ignore t :which-key "interactive")
    "is" 'haskell-interactive-switch)
#+end_src

** Kotlin
#+begin_src emacs-lisp :tangle no
  (use-package kotlin-mode
    :straight t)
#+end_src
** Org Babel
#+begin_src emacs-lisp
  (use-package ob-kotlin
    :straight t)

  (org-babel-do-load-languages
    'org-babel-load-languages
    '((python . t)
       (emacs-lisp . t)
       (C .  t)
       (haskell . t)
       (kotlin . t)))

  (setq org-confirm-babel-evaluate nil)
#+end_src

** C
#+begin_src emacs-lisp
  (setq-default c-basic-offset 4)
#+end_src

** Rust
#+begin_src emacs-lisp
  (use-package rust-mode
    :straight t)
#+end_src

** Javascript and Typescript
#+begin_src emacs-lisp
  ;; Not needed anymore, since emacs >= 29 has native tree-sitter with support for this typescript and tsx.
  ;; (use-package typescript-mode
  ;;   :straight t)

  (use-package js2-mode
    :straight t)

  (use-package rjsx-mode
    :straight t)

  (low/add-auto-mode "tsx" 'tsx-ts-mode)
#+end_src
* Processes
#+begin_src emacs-lisp
  ;; making emacs kill the terminal buffer without asking for confirmation
  (setq kill-buffer-query-functions (delq 'process-kill-buffer-query-function kill-buffer-query-functions))
#+end_src
