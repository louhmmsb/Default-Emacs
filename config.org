#+TITLE: Emacs Configuration
#+AUTHOR: Lourenço Henrique Moinheiro Martins Sborz Bogo

* General Stuff
** Setting Home and Emacs Directories
#+begin_src emacs-lisp
  (defvar user-home-directory (concat (getenv "HOME") "/"))
  (setq user-emacs-directory (concat user-home-directory ".emacs.d/"))
  (setq treesit-extra-load-path (cons (concat user-emacs-directory "tree-sitter/") '()))
#+end_src
** Utility functions
#+begin_src emacs-lisp
  (defun term-zsh ()
    (interactive) ;; This makes the function an interactively-callable command
    (term "/usr/bin/zsh"))

  (defun low/add-auto-mode (extension mode)
    "Add MODE to the `auto-mode-alist' for files with EXTENSION."
    (add-to-list 'auto-mode-alist (cons (concat "\\." extension "\\'") mode)))
#+end_src
** Removing bell
This removes the bell sound (also works on wsl)
#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src
** Performance
#+begin_src emacs-lisp
  (setq gc-cons-threshold 100000000)
  (setq read-process-output-max (* 1024 1024)) ;; 1mb
#+end_src
** Change backup file location
#+begin_src emacs-lisp
  ;; Write backups to ~/.emacs.d/backup/
  (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
        backup-by-copying      t  ; Don't de-link hard links
        version-control        t  ; Use version numbers on backups
        delete-old-versions    t  ; Automatically delete excess backups:
        kept-new-versions      3  ; how many of the newest versions to keep
        kept-old-versions      5) ; and how many of the old
#+end_src
* Setting up straight and use package
** Setting packages repositories
#+begin_src emacs-lisp
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org"   . "https://orgmode.org/elpa/")
                           ("elpa"  . "https://elpa.gnu.org/packages/")))
#+end_src
** Setting up Straight Package
#+begin_src emacs-lisp
    ;; (setq straight-repository-branch "develop")
     (defvar bootstrap-version)
     (let ((bootstrap-file
             (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
            (bootstrap-version 5))
       (unless (file-exists-p bootstrap-file)
         (with-current-buffer
           (url-retrieve-synchronously
             "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
             'silent 'inhibit-cookies)
           (goto-char (point-max))
           (eval-print-last-sexp)))
       (load bootstrap-file nil 'nomessage))
#+end_src

** Setting up Use Package
#+begin_src emacs-lisp
  (straight-use-package 'use-package)

  (setq use-package-always-ensure t) ;; check if packages that I use are installed
#+end_src
* Cleaning up .emacs.d
#+begin_src emacs-lisp
  ;; Changing the user-emacs-directory so unwanted files stay out
  (setq
    user-emacs-directory (expand-file-name "~/.cache/emacs")
    url-history-file     (expand-file-name "url/history" user-emacs-directory))

  ;; Package to automatically set common paths to user-emacs-directory
  (use-package no-littering
    :straight t)

  ;; setting custom-file
  (setq custom-file "~/.config/.custom.el")
  (if (file-exists-p custom-file) (load custom-file))

#+end_src
* Packages Setup
** Completion framework
*** Vertico
#+begin_src emacs-lisp
  (use-package vertico
    :straight t
    :init
    (vertico-mode))

  (use-package vertico
    :straight t
    :diminish
    :bind (
            :map vertico-map
            ("C-j" . vertico-next)
            ("C-k" . vertico-previous))
    :init
    (vertico-mode)
    (setq completion-ignore-case t
      read-file-name-completion-ignore-case t
      read-buffer-completion-ignore-case t))

  (use-package consult
    :straight t
    :bind
    (("C-s" . consult-line))
    :init
    (recentf-mode 1))


  (use-package savehist
    :straight t
    :init
    (savehist-mode))

  (use-package emacs
    :init
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
              (replace-regexp-in-string
                "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                crm-separator)
              (car args))
        (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    (setq minibuffer-prompt-properties
      '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    (setq read-extended-command-predicate
      #'command-completion-default-include-p)

    (setq enable-recursive-minibuffers t))

  (use-package orderless
    :straight t
    :ensure t
    :custom
    (completion-styles '(flex orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))

  (use-package marginalia
    :ensure t
    :config
    (marginalia-mode))

  (use-package embark
    :ensure t

    :bind
    (("M-o" . embark-act)         ;; pick some comfortable binding
      ("C-o" . embark-dwim)        ;; good alternative: M-.
      ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    ;; Show the Embark target at point via Eldoc.  You may adjust the Eldoc
    ;; strategy, if you want to see the documentation from multiple providers.
    (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
    ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
      '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
         nil
         (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t ; only need to install it, embark loads it after consult if found
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))

#+end_src
** UI
This section has a lot of submodules, and only one should be enabled. This means that every source block inside the submodules, but one should have :tangle no.

The block below is used in all modules.
#+begin_src emacs-lisp
  ;; need to run M-x all-the-icons-install-fonts
  (use-package all-the-icons :straight t)

  (use-package which-key
    :straight t
    :config
    (which-key-mode 1))

  (use-package org-modern
    :straight (org-modern :type git :host github :repo "minad/org-modern")
    :hook (org-mode . org-modern-mode))

  (use-package doom-themes
    :ensure t
    :straight t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
      doom-themes-enable-italic t)) ; if nil, italics is universally disabled

  (use-package catppuccin-theme
    :config (setq catppuccin-height-title1 1.5))
#+end_src
*** Nano emacs 
This package is responsible for an entire ui style. The reason I'm using this fork, is because it works better than the original on the Emacs version I'm using. When the problems are solved, maybe I will switch to the other repo.
- *IMPORTANT*: To make nano work with treemacs, I need to comment the line 515 (approx.,) of my local nano-modeline.el file. Sources: https://randomgeekery.org/config/emacs/nano/.
  - The line is the one with the following content: ~(setq-default mode-line-format "")~.

#+begin_src emacs-lisp
  ;; (straight-use-package
  ;;   '(nano-emacs :type git :host github :repo "rougier/nano-emacs"
  ;;      :fork (:host github
  ;;              :repo "cnngimenez/nano-emacs")))

  ;; (require 'nano)
  (straight-use-package
    '(nano-emacs :type git :host github :repo "rougier/nano-emacs"))

  (defun nano-theme-set-spaceduck ()
    (setq frame-background-mode 'dark)
    (setq nano-color-foreground "#ecf0c1")
    (setq nano-color-background "#0f111b")
    (setq nano-color-highlight  "#1b1c36")
    (setq nano-color-critical   "#e33400")
    (setq nano-color-salient    "#00a4cc")
    (setq nano-color-strong     "#e39400")
    (setq nano-color-popout     "#f2ce00")
    (setq nano-color-subtle     "#7a5ccc")
    (setq nano-color-faded      "#b3a1e6"))

  (nano-theme-set-spaceduck)
  ;; (load-theme 'catppuccin t)

  (require 'nano-base-colors)
  (require 'nano-faces)
  (nano-faces)
  (require 'nano-theme)
  (nano-theme)

  ;; Nano header & mode lines
  (require 'nano-modeline)

  ;; Welcome message
  (let ((inhibit-message t))
    (message "Welcome to GNU Emacs / N Λ N O edition")
    (message (format "Initialization time: %s" (emacs-init-time))))

  ;; (require 'nano-splash)
#+end_src
*** Doom emacs
#+begin_src emacs-lisp :tangle no
  (load-theme 'doom-monokai-spectrum t)
  (use-package doom-modeline
    :straight t
    :ensure t
    :init (doom-modeline-mode 1))
#+end_src
** Dirvish (Dired but better)
#+begin_src emacs-lisp
  (use-package dirvish
    :straight t
    :ensure t
    :init
    ;; Let Dirvish take over Dired globally
    (dirvish-override-dired-mode))
#+end_src
** Flyspell
#+begin_src emacs-lisp
  (use-package flyspell-correct
    :straight t
    :after flyspell)

  ;; (use-package flyspell-correct-ivy
  ;;   :straight t
  ;;   :after flyspell-correct)

  (setq ispell-program-name "hunspell")
  (setq ispell-dictionary "pt_BR")
  ;; (setq ispell-local-dictionary "pt_BR")
  (setq ispell-current-dictionary "pt_BR")
  (setq ispell-local-dictionary-alist '(
                                         ("pt_BR" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "pt_BR") nil utf-8)
                                         ("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)))
  (setq ispell-hunspell-dictionary-alist ispell-local-dictionary-alist)
#+end_src
** Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :straight t)
#+end_src
** Code
*** Generic
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :straight t
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
** Completion (Company mode)
#+begin_src emacs-lisp
  (use-package company
    :straight t
    :init
    (setq company-minimum-prefix-length 1)
    (setq company-idle-delay 0.1)
    :hook
    (after-init . global-company-mode))

  (use-package company-fuzzy
    :hook (company-mode . company-fuzzy-mode)
    :init
    (setq company-fuzzy-sorting-backend 'none
          company-fuzzy-prefix-on-top nil
          company-fuzzy-trigger-symbols '("." "->" "<" "\"" "'" "@")))
#+end_src
#+begin_src emacs-lisp :tangle no
  (use-package corfu
    :straight t
    ;; Optional customizations
    ;; :custom
    ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    ;; (corfu-auto t)                 ;; Enable auto completion
    ;; (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; Enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.
    ;; This is recommended since Dabbrev can be used globally (M-/).
    ;; See also `corfu-exclude-modes'.
    :init
    (setq corfu-auto t
      corfu-auto-delay 0
      corfu-auto-prefix 0
      completion-styles '(orderless basic))
    (global-corfu-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; TAB cycle if there are only few candidates
    (setq completion-cycle-threshold 3)

    ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
    ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (setq tab-always-indent 'complete))
#+end_src
** Snippets
For snippets the package that I (and almost everyone else) use is Yasnippet.
#+begin_src emacs-lisp
  (use-package yasnippet
    :straight t
    :init
    (setq yas-snippet-dirs '("~/.emacs.d/snippets/"))
    :config
    (yas-global-mode)
    :hook
    (prog-mode . yas-minor-mode))

  (use-package yasnippet-snippets
    :straight t)
#+end_src

#+RESULTS:

** Org and Note Taking
#+begin_src emacs-lisp
  (use-package org
    :straight (:type built-in)
    :init
    (defun low/org-mode-setup ()
      (org-indent-mode)
      (visual-line-mode 1))
    :hook
    (org-mode . low/org-mode-setup)
    :config
    (setq org-ellipsis " ▾"))

  (use-package org-roam
    :straight t
    :ensure t
    :requires (org)
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/Notes")
    (org-roam-completion-everywhere t)
    :config
    (org-roam-db-autosync-enable))

  (use-package visual-fill-column
    :init
    (defun low/visual-fill ()
      (setq visual-fill-column-width 200
        visual-fill-column-center-text t
        visual-fill-column-adjust-for-text-scale nil)
      (visual-fill-column-mode 1))
    :hook
    (org-mode   . low/visual-fill)
    (term-mode  . low/visual-fill)
    (vterm-mode . low/visual-fill))
#+end_src
** Project Management
#+begin_src emacs-lisp
  (use-package projectile
    :straight t
    :diminish projectile-mode
    :init
    (projectile-mode 1))

  (use-package consult-projectile
    :straight t)
#+end_src
** Git
#+begin_src emacs-lisp
  (use-package magit
    :straight t
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src
** Treemacs
#+begin_src emacs-lisp
  (use-package treemacs
    :straight t)

  (use-package treemacs-evil
    :straight t
    :after (treemacs evil)
    :ensure t)

  (use-package treemacs-projectile
    :after (treemacs projectile)
    :ensure t)

  (use-package treemacs-icons-dired
    :straight t
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :ensure t)

  (use-package treemacs-magit
    :straight t
    :after (treemacs magit)
    :ensure t)
#+end_src
** Keybindings
#+begin_src emacs-lisp
  (use-package evil
    :straight t
    :init
    (setq evil-want-keybinding nil)
    (add-hook 'term-mode-hook 'evil-emacs-state))
  (use-package evil-collection
    :straight t
    :after evil
    :ensure t
    :config
    (evil-mode 1)
    (evil-collection-init))

  (use-package hydra
    :straight t
    :config
    (defhydra hydra-text-scale ()
      "change text size"
      ("i" text-scale-increase "in")
      ("o" text-scale-decrease "out")
      ("q" nil "exit" :exit t))
    (defhydra hydra-window-width ()
      "change window width"
      ("i" evil-window-increase-width "increase")
      ("o" evil-window-decrease-width "decrease")
      ("q" nil "exit" :exit t)))

  (use-package general
    :straight t
    :config
    (general-create-definer low/leader
      :states '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")
    (general-create-definer low/local-leader
      :states '(normal insert visual emacs)
      :prefix "SPC m"
      :global-prefix "M-SPC")
    (general-create-definer low/next-key
      :states '(normal insert visual emacs)
      :prefix "]"
      :global-prefix "C-]")
    (general-create-definer low/prev-key
      :states '(normal insert visual emacs)
      :prefix "["
      :global-prefix "C-[")

    ;; Fixing visual line motion
    (general-def 'motion "j" 'evil-next-visual-line)
    (general-def 'motion "k" 'evil-previous-visual-line)

    (low/leader
      "f"  '(:ignore t :which-key "file")
      "ff" 'find-file
      "fr" 'consult-recent-file
      "h"  '(:ignore t :which-key "help")
      "hv" 'describe-variable
      "hf" 'describe-function
      "hk" 'describe-key
      "b"  '(:ignore t :which-key "buffer")
      "bd" 'kill-current-buffer
      "bs" 'save-buffer
      "bb" 'consult-buffer
      "w"  '(:ignore t :which-key "window")
      "wj" 'windmove-down
      "wk" 'windmove-up
      "wl" 'windmove-right
      "wh" 'windmove-left
      "w-" 'split-window-below
      "w/" 'split-window-right
      "wd" 'evil-window-delete
      "ww" '(hydra-window-width/body :which-key "change window width")
      "m"  '(:ignore t :which-key "local leader")
      "g"  '(:ignore t :which-key "magit")
      "gg" 'magit-status
      "t"  '(:ignore t :which-key "toggle")
      "ts" '(hydra-text-scale/body :which-key "scale text")
      "o"  '(:ignore t :which-key "open")
      "oa" 'org-agenda
      "ot" 'vterm
      "oc" 'org-capture
      "n"  '(:ignore t :which-key "notes")
      "nl" 'org-roam-buffer-toggle
      "nf" 'org-roam-node-find
      "ni" 'org-roam-node-insert)
    (low/leader
      :keymaps 'projectile-mode-map
      "p" '(projectile-command-map :which-key "projectile"))
      "psr" '(consult-ripgrep)
    (low/leader
      "l" '(:ignore t :which-key "lsp")
      "lg" '(:ignore t :which-key "goto")
      "lgg" 'eglot-find-declaration)
    (low/local-leader
      :keymaps 'org-mode-map
      :major-modes 'org-mode
      "o"  'org-open-at-point
      "e"  'org-edit-special
      "i"  '(:ignore t :which-key "insert")
      "is" 'org-insert-structure-template
      "s"  '(:ignore t :which-key "source")
      "sr" 'org-babel-remove-result
      "se" 'org-babel-execute-src-block)
    (low/local-leader
      :definer 'minor-mode
      :keymaps 'org-src-mode
      "e" 'org-edit-src-exit)
    (general-def
      :keymaps 'flyspell-mode-map
      "C-;" 'flyspell-correct-wrapper)
    (general-def
      :states 'normal
      :keymaps 'org-mode-map
      "<tab>" 'org-cycle)
    (general-def
      :states 'insert
      :keymaps 'org-mode-map
      "M-<return>" 'org-insert-item)
    (general-def
      :states 'normal
      :keymaps 'dirvish-mode-map
      "?" 'dirvish-dispatch
      "q" 'dirvish-quit)
    (general-def
      :keymaps 'org-agenda-mode-map
      :major-modes 'org-agenda
      "h"  'org-agenda-undo
      "j"  'evil-next-visual-line
      "k"  'evil-previous-visual-line
      "l"  'org-agenda-switch-to)
    (low/next-key
      "b" 'evil-next-buffer)
    (low/prev-key
      "b" 'evil-prev-buffer))
#+end_src

** LSP
#+begin_src emacs-lisp
  (use-package eglot
    :ensure nil
    :hook
    ((tsx-ts-mode typescript-ts-mode js-ts-mode js2-mode java-mode java-ts-mode) . eglot))
#+end_src
*** Java
#+begin_src emacs-lisp
  (use-package eglot-java
    :straight
    :hook
    ((java-ts-mode) . eglot-java-mode))
#+end_src
** Elcord
#+begin_src emacs-lisp :tangle no
  (use-package elcord
    :straight t
    :config
    (elcord-mode 1))
#+end_src
** Terminal
#+begin_src emacs-lisp
  (use-package vterm
    :straight t
    :ensure t)
#+end_src
* UI
** Removing unnecessary things from UI
#+begin_src emacs-lisp
  ;; removing menu, tool and scroll bar
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (toggle-scroll-bar -1)

  ;; disabling splahes
  (setq inhibit-startup-message t) 
  (setq initial-scratch-message nil)
#+end_src
** Font
#+begin_src emacs-lisp
  ;;(set-frame-font "JetBrains Mono 13" nil t)
  (set-frame-font "JetBrains Mono 13")
#+end_src
** Line Numbers
#+begin_src emacs-lisp
    (global-display-line-numbers-mode)
    (column-number-mode)
    (setq display-line-numbers-type 'relative)

    ;; disabling it on some types of files
    (dolist (mode '(term-mode-hook
                     eshell-mode-hook
                     org-mode-hook
                     vterm-mode-hook))
      (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src
** Windows fix for fullscreen
There are different values for the variable windows-buffer-width.
- When using the doom ui, the best values I found were 2550x1080
- When using the nano ui, the best values I found were 2520x1060
  
#+begin_src emacs-lisp
  (defun emacs-windows-fullscreen-mode-2560x1080 ()
    "Make Emacs go fullscreen when using wsl2 inside windows.
  INTERACTIVE"
    (interactive)
    (set-frame-parameter (selected-frame) 'left 1366)
    (set-frame-parameter (selected-frame) 'top 0)
    (set-frame-parameter (selected-frame) 'undecorated t)
    (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
    (set-frame-size (selected-frame) 2520 1060 t))
#+end_src
* Org Agenda
#+begin_src emacs-lisp
  (setq org-agenda-files '("~/org/inbox.org"
                            "~/org/gtd.org"
                            "~/org/tickler.org"))

  (setq org-todo-keywords '((sequence "TODO(t)" "WAIT(w)" "REVIEW(r)" "|" "DONE(d)" "CANCELLED(c)")))

  (setq org-capture-templates '(("t" "Todo [inbox]" entry
                                  (file+headline "~/org/inbox.org" "Tasks")
                                  "* TODO %i%?")
                                 ("T" "Tickler" entry
                                   (file+headline "~/org/tickler.org" "Tickler")
                                   "* %i%? \n %t")))

  (setq org-refile-targets '(("~/org/gtd.org" :maxlevel . 3)
                              ("~/org/someday.org" :level . 1)
                              ("~/org/tickler.org" :maxlevel . 2)))

  (setq org-log-done 'time)
#+end_src
* Code
** General Configurations
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
  (save-place-mode 1)
  (setq use-dialog-box nil)
  (global-auto-revert-mode 1)
  (add-hook 'prog-mode-hook #'electric-pair-mode)

  (use-package hl-todo
    :straight t
    :hook (prog-mode . hl-todo-mode)
    :config
    (setq hl-todo-highlight-punctuation ":"
      hl-todo-keyword-faces
      `(("TODO"       warning bold)
         ("FIXME"      error bold)
         ("HACK"       font-lock-constant-face bold)
         ("REVIEW"     font-lock-keyword-face bold)
         ("NOTE"       success bold)
         ("DEPRECATED" font-lock-doc-face bold))))
  ;; (global-tree-sitter-mode)
  ;; (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
#+end_src
** Tree-sitter
Emacs 29 has native tree-sitter support so here I'm remapping the major modes to the tree-sitter versions of them.
#+begin_src emacs-lisp
  (setq major-mode-remap-alist
    '((yaml-mode . yaml-ts-mode)
       (bash-mode . bash-ts-mode)
       (js2-mode . js-ts-mode)
       (typescript-mode . typescript-ts-mode)
       (json-mode . json-ts-mode)
       (css-mode . css-ts-mode)
       (python-mode . python-ts-mode)
       (c-mode . c-ts-mode)
       (java-mode . java-ts-mode)))
#+end_src
** Emacs Lisp
#+begin_src emacs-lisp
  (setq lisp-indent-offset 2)
#+end_src

** Haskell
#+begin_src emacs-lisp
  (use-package haskell-mode
    :straight t)

  (low/local-leader
    :keymaps 'haskell-mode-map
    :major-modes 'haskell-mode
    "i" '(:ignore t :which-key "interactive")
    "is" 'haskell-interactive-switch)
#+end_src

** Kotlin
#+begin_src emacs-lisp :tangle no
  (use-package kotlin-mode
    :straight t)
#+end_src
** Org Babel
#+begin_src emacs-lisp
  (use-package ob-kotlin
    :straight t)

  (org-babel-do-load-languages
    'org-babel-load-languages
    '((python . t)
       (emacs-lisp . t)
       (C .  t)
       (haskell . t)
       (kotlin . t)))

  (setq org-confirm-babel-evaluate nil)
#+end_src

** C
#+begin_src emacs-lisp
  (setq-default c-basic-offset 4)
#+end_src

** Rust
#+begin_src emacs-lisp
  (use-package rust-mode
    :straight t)
#+end_src

** Javascript and Typescript
#+begin_src emacs-lisp
  ;; Not needed anymore, since emacs >= 29 has native tree-sitter with support for this typescript and tsx.
  ;; (use-package typescript-mode
  ;;   :straight t)

  (use-package js2-mode
    :straight t)

  (use-package rjsx-mode
    :straight t)

  (low/add-auto-mode "tsx" 'tsx-ts-mode)
#+end_src
** Nix
#+begin_src emacs-lisp
  (use-package nix-mode
    :straight t
    :mode "\\.nix\\'")
#+end_src
** YAML
#+begin_src emacs-lisp
  (use-package yaml-mode
    :straight t)
#+end_src
** Lua
#+begin_src emacs-lisp
  (use-package lua-mode
    :straight t)
#+end_src
** Yuck
#+begin_src emacs-lisp
  (use-package yuck-mode
    :straight t)
#+end_src
* Processes
#+begin_src emacs-lisp
  ;; making emacs kill the terminal buffer without asking for confirmation
  (setq kill-buffer-query-functions (delq 'process-kill-buffer-query-function kill-buffer-query-functions))
#+end_src
