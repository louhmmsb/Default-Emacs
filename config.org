#+TITLE: Emacs Configuration
#+AUTHOR: Lourenço Henrique Moinheiro Martins Sborz Bogo

* General Stuff
** Setting Home and Emacs Directories
#+begin_src emacs-lisp
  (defvar user-home-directory (concat (getenv "HOME") "/"))
  (setq user-emacs-directory (concat user-home-directory ".emacs.d/"))
#+end_src
** Utility functions
#+begin_src emacs-lisp
  (defun term-zsh ()
    (interactive) ;; This makes the function an interactively-callable command
    (term "/usr/bin/zsh"))
#+end_src
* Setting up straight and use package
** Setting packages repositories
#+begin_src emacs-lisp
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org"   . "https://orgmode.org/elpa/")
                           ("elpa"  . "https://elpa.gnu.org/packages/")))
#+end_src
** Setting up Straight Package
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
          (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
         (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
        (url-retrieve-synchronously
          "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
          'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

** Setting up Use Package
#+begin_src emacs-lisp
  (straight-use-package 'use-package)

  (setq use-package-always-ensure t) ;; check if packages that I use are installed
#+end_src
* Cleaning up .emacs.d
#+begin_src emacs-lisp
  ;; Changing the user-emacs-directory so unwanted files stay out
  (setq
    user-emacs-directory (expand-file-name "~/.cache/emacs")
    url-history-file     (expand-file-name "url/history" user-emacs-directory))
      
  ;; Package to automatically set common paths to user-emacs-directory
  (use-package no-littering
    :straight t)

  ;; setting custom-file
  (setq custom-file "~/.config/.custom.el")
  (if (file-exists-p custom-file) (load custom-file))

#+end_src
* Packages Setup
** UI
#+begin_src emacs-lisp
  ;; need to run M-x all-the-icons-install-fonts
  (use-package all-the-icons :straight t)
  (use-package doom-modeline
    :straight t
    :ensure t
    :init (doom-modeline-mode 1))
  (use-package doom-themes
    :ensure t
    :straight t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
      doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-one t))

  (use-package which-key
    :straight t
    :config
    (which-key-mode 1))
  (use-package ivy
    :straight t
    :diminish
    :bind (("C-s" . swiper)
            :map ivy-minibuffer-map
            ("TAB" . ivy-alt-done)  
            ("C-l" . ivy-alt-done)
            ("C-j" . ivy-next-line)
            ("C-k" . ivy-previous-line)
            :map ivy-switch-buffer-map
            ("C-k" . ivy-previous-line)
            ("C-l" . ivy-done)
            ("C-d" . ivy-switch-buffer-kill)
            :map ivy-reverse-i-search-map
            ("C-k" . ivy-previous-line)
            ("C-d" . ivy-reverse-i-search-kill))
    ;;:demand
    :init
    (ivy-mode 1))

  (use-package counsel
    :straight t
    :bind (
            ("M-x"     . counsel-M-x)
            ("C-x b"   . counsel-ibuffer)
            ("C-x C-f" . counsel-find-file)
            :map minibuffer-local-map
            ("C-r"     . 'counsel-minibuffer-history))
    :config
    (setq ivy-initial-inputs-alist nil))

  (use-package ivy-rich
    :straight t
    :init
    (ivy-rich-mode 1))
  (use-package org-modern
    :straight (org-modern :type git :host github :repo "minad/org-modern")
    :hook (org-mode . org-modern-mode))
#+end_src
** QOL
#+begin_src emacs-lisp
  (use-package smex
    :straight t
    :config
    (smex-initialize))
#+end_src
** Code
*** Generic
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :straight t
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
** Org and Note Taking
#+begin_src emacs-lisp
  (use-package org
    :straight (:type built-in)
    :init
    (defun low/org-mode-setup ()
      (org-indent-mode)
      (visual-line-mode 1))
    :hook
    (org-mode . low/org-mode-setup)
    :config
    (setq org-ellipsis " ▾"))

  (use-package org-roam
    :straight t
    :ensure t
    :requires (org)
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/Notes")
    (org-roam-completion-everywhere t)
    :config
    (org-roam-db-autosync-enable))

  (use-package visual-fill-column
    :init
    (defun low/visual-fill ()
      (setq visual-fill-column-width 200
        visual-fill-column-center-text t
        visual-fill-column-adjust-for-text-scale nil)
      (visual-fill-column-mode 1))
    :hook
    (org-mode  . low/visual-fill)
    (term-mode . low/visual-fill))
#+end_src
** Project Management
#+begin_src emacs-lisp
  (use-package projectile
    :straight t
    :diminish projectile-mode
    :custom ((projectile-completion-system 'ivy))
    :init
    (projectile-mode 1))

  (use-package counsel-projectile
    :straight t
    :init
    (counsel-projectile-mode 1))
#+end_src
** Git
#+begin_src emacs-lisp
  (use-package magit
    :straight t
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src
** Keybindings
#+begin_src emacs-lisp
      (use-package evil
        :straight t
        :init
        (setq evil-want-keybinding nil)
        (add-hook 'term-mode-hook 'evil-emacs-state))
      (use-package evil-collection
        :straight t
        :after evil
        :ensure t
        :config
        (evil-mode 1)
        (evil-collection-init))

      (use-package hydra
        :straight t
        :config
        (defhydra hydra-text-scale ()
          "change text size"
          ("i" text-scale-increase "in")
          ("o" text-scale-decrease "out")
          ("q" nil "exit" :exit t)))

      (use-package general
        :straight t
        :config
        (general-create-definer low/leader
          :states '(normal insert visual emacs)
          :prefix "SPC"
          :global-prefix "C-SPC")
        (general-create-definer low/local-leader
          :states '(normal insert visual emacs)
          :prefix "SPC m"
          :global-prefix "M-SPC")
        (general-create-definer low/next-key
          :states '(normal insert visual emacs)
          :prefix "]"
          :global-prefix "C-]")
        (general-create-definer low/prev-key
          :states '(normal insert visual emacs)
          :prefix "["
          :global-prefix "C-[")

        ;; Fixing visual line motion
        (general-def 'motion "j" 'evil-next-visual-line)
        (general-def 'motion "k" 'evil-previous-visual-line)

        (low/leader
          "f"  '(:ignore t :which-key "file")
          "ff" 'counsel-find-file
          "fr" 'counsel-recentf
          "h"  '(:ignore t :which-key "help")
          "hv" 'counsel-describe-variable
          "hf" 'counsel-describe-function
          "hk" 'describe-key
          "b"  '(:ignore t :which-key "buffer")
          "bd" 'kill-current-buffer
          "bs" 'save-buffer
          "bS" 'counsel-switch-buffer
          "w"  '(:ignore t :which-key "window")
          "wj" 'windmove-down
          "wk" 'windmove-up
          "wl" 'windmove-right
          "wh" 'windmove-left
          "w-" 'split-window-below
          "w/" 'split-window-right
          "wd" 'evil-window-delete
          "m"  '(:ignore t :which-key "local leader")
          "g"  '(:ignore t :which-key "magit")
          "gs" 'magit-status
          "t"  '(:ignore t :which-key "toggle")
          "ts" '(hydra-text-scale/body :which-key "scale text")
          "o"  '(:ignore t :which-key "open")
          "ot" 'term-zsh
          "n"  '(:ignore t :which-key "notes")
          "nl" 'org-roam-buffer-toggle
          "nf" 'org-roam-node-find
          "ni" 'org-roam-node-insert)
        (low/leader
          :keymaps 'projectile-mode-map
          "p" '(projectile-command-map :which-key "projectile"))
        (low/local-leader
          :keymaps 'org-mode-map
          :major-modes 'org-mode
          "e"  'org-edit-special
          "i"  '(:ignore t :which-key "insert")
          "is" 'org-insert-structure-template
          "s"  '(:ignore t :which-key "source")
          "sr" 'org-babel-remove-result
          "se" 'org-babel-execute-src-block)
        (low/local-leader
          :definer 'minor-mode
          :keymaps 'org-src-mode
          "e" 'org-edit-src-exit)
        (general-def
          :states 'normal
          :keymaps 'org-mode-map
          "<tab>" 'org-cycle)
        (low/next-key
          "b" 'evil-next-buffer)
        (low/prev-key
          "b" 'evil-prev-buffer))
#+end_src
** Elcord
#+begin_src emacs-lisp
  (use-package elcord
    :straight t
    :config
    (elcord-mode 1))
#+end_src
* UI
** Removing unnecessary things from UI
#+begin_src emacs-lisp
  ;; removing menu, tool and scroll bar
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (toggle-scroll-bar -1)

  ;; disabling splahes
  (setq inhibit-startup-message t) 
  (setq initial-scratch-message nil)
#+end_src
** Font
#+begin_src emacs-lisp
  (set-frame-font "JetBrains Mono 13" nil t)
#+end_src
** Line Numbers
#+begin_src emacs-lisp
  (global-display-line-numbers-mode)
  (column-number-mode)
  (setq display-line-numbers-type 'relative)

  ;; disabling it on some types of files
  (dolist (mode '(term-mode-hook
                   eshell-mode-hook
                   org-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src
* Code
** General Configurations
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
  (save-place-mode 1)
  (setq use-dialog-box nil)
  (global-auto-revert-mode 1)

  (use-package tree-sitter
    :straight t)
  (use-package tree-sitter-langs
    :straight t)
  (use-package hl-todo
    :straight t
    :hook (prog-mode . hl-todo-mode)
    :config
    (setq hl-todo-highlight-punctuation ":"
      hl-todo-keyword-faces
      `(("TODO"       warning bold)
         ("FIXME"      error bold)
         ("HACK"       font-lock-constant-face bold)
         ("REVIEW"     font-lock-keyword-face bold)
         ("NOTE"       success bold)
         ("DEPRECATED" font-lock-doc-face bold))))
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
#+end_src
** Emacs Lisp
#+begin_src emacs-lisp
  (setq lisp-indent-offset 2)
#+end_src

** Haskell
#+begin_src emacs-lisp
  (use-package haskell-mode
    :straight t)

  (low/local-leader
    :keymaps 'haskell-mode-map
    :major-modes 'haskell-mode
    "i" '(:ignore t :which-key "interactive")
    "is" 'haskell-interactive-switch)
#+end_src

** Kotlin
#+begin_src emacs-lisp
  (use-package kotlin-mode
    :straight t)
#+end_src
** Org Babel
#+begin_src emacs-lisp
  (use-package ob-kotlin
    :straight t)

  (org-babel-do-load-languages
    'org-babel-load-languages
    '((python . t)
       (emacs-lisp . t)
       (C .  t)
       (haskell . t)
       (kotlin . t)))

  (setq org-confirm-babel-evaluate nil)
#+end_src

** C
#+begin_src emacs-lisp
  (setq-default c-basic-offset 4)
#+end_src

* Processes
#+begin_src emacs-lisp
  ;; making emacs kill the terminal buffer without asking for confirmation
  (setq kill-buffer-query-functions (delq 'process-kill-buffer-query-function kill-buffer-query-functions))
#+end_src
