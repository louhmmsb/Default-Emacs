#+TITLE: Emacs Configuration
#+AUTHOR: Louren√ßo Henrique Moinheiro Martins Sborz Bogo

* General Stuff
** Setting Home and Emacs Directories
#+begin_src emacs-lisp
  (defvar user-home-directory (concat (getenv "HOME") "/"))
  (setq user-emacs-directory (concat user-home-directory ".emacs.d/"))
#+end_src
* Setting up straight and use package
** Setting packages repositories
#+begin_src emacs-lisp
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org"   . "https://orgmode.org/elpa/")
                           ("elpa"  . "https://elpa.gnu.org/packages/")))
#+end_src
** Setting up Straight Package
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
          (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
         (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
        (url-retrieve-synchronously
          "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
          'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

** Setting up Use Package
#+begin_src emacs-lisp
  (straight-use-package 'use-package)

  (setq use-package-always-ensure t) ;; check if packages that I use are installed
#+end_src
* Cleaning up .emacs.d
#+begin_src emacs-lisp
  ;; Changing the user-emacs-directory so unwanted files stay out
  (setq
    user-emacs-directory (expand-file-name "~/.cache/emacs")
    url-history-file     (expand-file-name "url/history" user-emacs-directory))
      
  ;; Package to automatically set common paths to user-emacs-directory
  (use-package no-littering
    :straight t)

  ;; setting custom-file
  (setq custom-file "~/.config/.custom.el")
  (if (file-exists-p custom-file) (load custom-file))

#+end_src
* Packages Setup
** UI
#+begin_src emacs-lisp
  ;; need to run M-x all-the-icons-install-fonts
  (use-package all-the-icons :straight t)
  (use-package doom-modeline
    :straight t
    :ensure t
    :init (doom-modeline-mode 1))
  (use-package evil
    :straight t
    :init
    (setq evil-want-keybinding nil))
  (use-package evil-collection
    :straight t
    :after evil
    :ensure t
    :config
    (evil-collection-init))
  (use-package doom-themes
    :ensure t
    :straight t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
      doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-one t))

  (use-package which-key :straight t)
  (use-package org-bullets :straight t)
  (use-package ivy
    :straight t
    :diminish
    :bind (("C-s" . swiper)
            :map ivy-minibuffer-map
            ("TAB" . ivy-alt-done)  
            ("C-l" . ivy-alt-done)
            ("C-j" . ivy-next-line)
            ("C-k" . ivy-previous-line)
            :map ivy-switch-buffer-map
            ("C-k" . ivy-previous-line)
            ("C-l" . ivy-done)
            ("C-d" . ivy-switch-buffer-kill)
            :map ivy-reverse-i-search-map
            ("C-k" . ivy-previous-line)
            ("C-d" . ivy-reverse-i-search-kill))
    ;;:demand
    :init
    (ivy-mode 1))

  (use-package counsel
    :straight t
    :bind (
            ("M-x"     . counsel-M-x)
            ("C-x b"   . counsel-ibuffer)
            ("C-x C-f" . counsel-find-file)
            :map minibuffer-local-map
            ("C-r"     . 'counsel-minibuffer-history))
    :config
    (setq ivy-initial-inputs-alist nil))

  (use-package ivy-rich
    :straight t
    :init
    (ivy-rich-mode 1))
#+end_src
** Code
*** Generic
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :straight t
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
** Keybindings
#+begin_src emacs-lisp
  (use-package general
    :straight t
    :config
    (general-create-definer low/leader
      :states '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")
    (general-create-definer low/local-leader
      :states '(normal insert visual emacs)
      :prefix "SPC m"
      :global-prefix "M-SPC")
    (general-create-definer low/next-key
      :states '(normal insert visual emacs)
      :prefix "]"
      :global-prefix "C-]")
    (general-create-definer low/prev-key
      :states '(normal insert visual emacs)
      :prefix "["
      :global-prefix "C-[")

    ;; Fixing visual line motion
    (general-def 'motion "j" 'evil-next-visual-line)
    (general-def 'motion "k" 'evil-previous-visual-line)

    (low/leader
      "f" '(:ignore t :which-key "file")
      "ff" 'counsel-find-file
      "fr" 'counsel-recentf
      "h" '(:ignore t :which-key "help")
      "hv" 'counsel-describe-variable
      "hf" 'counsel-describe-function
      "hk" 'describe-key
      "b" '(:ignore t :which-key "buffer")
      "bd" 'kill-current-buffer
      "bs" 'save-buffer
      "w" '(:ignore t :which-key "window")
      "wj" 'windmove-down
      "wk" 'windmove-up
      "wl" 'windmove-right
      "wh" 'windmove-left
      "w-" 'split-window-below
      "w/" 'split-window-right
      "wd" 'evil-window-delete)
    (low/local-leader
      :keymaps '(org-mode-map)
      "e" 'org-edit-special)
    (general-def
      :states 'normal
      "<tab>" 'org-cycle)
    (low/next-key
      "b" 'evil-next-buffer)
    (low/prev-key
      "b" 'evil-prev-buffer))

  ;; Trick so I can define keybindings when entering org-src-mode
  (add-hook 'org-src-mode-hook
    (lambda ()
      (low/local-leader
        "e" 'org-edit-src-exit)))

#+end_src
* UI
** Removing unnecessary things from UI
#+begin_src emacs-lisp
  ;; removing menu, tool and scroll bar
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (toggle-scroll-bar -1)

  ;; disabling splahes
  (setq inhibit-startup-message t) 
  (setq initial-scratch-message nil)
#+end_src
** Font
#+begin_src emacs-lisp
  (set-frame-font "JetBrains Mono 13" nil t)
#+end_src
** Line Numbers
#+begin_src emacs-lisp
  (global-display-line-numbers-mode)
  (column-number-mode)
  (setq display-line-numbers-type 'relative)

  ;; disabling it on some types of files
  (dolist (mode '(term-mode-hook
                   eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src
* Packages Configuration
** Which Key
#+begin_src emacs-lisp
  (which-key-mode)
#+end_src
** Evil
#+begin_src emacs-lisp
  (evil-mode 1)
#+end_src
** Org Bullets
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src
* Code
** General Configurations
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
#+end_src
** Emacs Lisp
#+begin_src emacs-lisp
  (setq lisp-indent-offset 2)
#+end_src
